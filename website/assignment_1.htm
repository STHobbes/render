<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Assignment 1</title>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<style>
A.links:hover {
color: black;
}

A {
text-decoration: none;
}

A:hover {
color: red;
}
</style>
<meta name="Microsoft Theme" content="roys-chalkboard 000, default">
<meta name="Microsoft Border" content="tl, default">
</head>

<body bgcolor="#000000" text="#FFFFFF" link="#FFCC99" vlink="#FF9966"><!--msnavigation-->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td><!--mstheme--><font face="Arial, Arial, Helvetica">

<p align="center"><font size="6"><strong>
<img src="_derived/assignment_1.htm_cmp_roys-chalkboard000_bnr.gif" width="600" height="60" border="0" alt="Assignment 1"></strong></font>
</p>
<h3 align="center"><strong><i><font size="5">3D Rendering Techniques and Algorithms</font></i></strong></h3>
<p align="center"><br>
<a href="index.htm"><img src="_derived/home_cmp_roys-chalkboard000_hbtn.gif" width="140" height="40" border="0" alt="Home"
                         align="middle"></a> <a href="assignments.htm"><img src="_derived/up_cmp_roys-chalkboard000_hbtn.gif"
                                                                            width="140" height="40" border="0" alt="Up"
                                                                            align="middle"></a> <img
src="_derived/assignment_1.htm_cmp_roys-chalkboard000_hbtn_p.gif" width="140" height="40" border="0" alt="Assignment 1"
align="middle"> <a href="assignment_2.htm"><img src="_derived/assignment_2.htm_cmp_roys-chalkboard000_hbtn.gif" width="140"
                                                height="40" border="0" alt="Assignment 2" align="middle"></a> <a
href="assignment_3.htm"><img src="_derived/assignment_3.htm_cmp_roys-chalkboard000_hbtn.gif" width="140" height="40" border="0"
                             alt="Assignment 3" align="middle"></a> <a href="assignment_4.htm"><img
src="_derived/assignment_4.htm_cmp_roys-chalkboard000_hbtn.gif" width="140" height="40" border="0" alt="Assignment 4"
align="middle"></a> <a href="assignment_5.htm"><img src="_derived/assignment_5.htm_cmp_roys-chalkboard000_hbtn.gif" width="140"
                                                    height="40" border="0" alt="Assignment 5" align="middle"></a> <a
href="assignment_6.htm"><img src="_derived/assignment_6.htm_cmp_roys-chalkboard000_hbtn.gif" width="140" height="40" border="0"
                             alt="Assignment 6" align="middle"></a> <a href="assignment_7.htm"><img
src="_derived/assignment_7.htm_cmp_roys-chalkboard000_hbtn.gif" width="140" height="40" border="0" alt="Assignment 7"
align="middle"></a> <a href="term_project.htm"><img src="_derived/term_project.htm_cmp_roys-chalkboard000_hbtn.gif" width="140"
                                                    height="40" border="0" alt="Term Project" align="middle"></a></p>
<p align="center">&nbsp;</p>

<!--mstheme--></font></td>
</tr><!--msnavigation--></table><!--msnavigation-->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td valign="top" width="1%"><!--mstheme--><font face="Arial, Arial, Helvetica">

<p>


</p>

<!--mstheme--></font></td>
<td valign="top" width="24"></td><!--msnavigation-->
<td valign="top"><!--mstheme--><font face="Arial, Arial, Helvetica">
<h3>Assignment 1 - Starting a Ray Tracer</h3>
<p>The first exercise builds the basic framework of a ray tracer.&nbsp; The idea
is that for every pixel on a picture plane (the target plane), you cast a ray
(an infinite extent line) from the eye through the point on the planerepresenting the spatial location of that pixel, and look
for what it intersects.&nbsp; You then fill in a colour for that pixel based on
what was closest to the eye.</p>
<h4>Goals</h4>
<ul>
<li><i>Don't worry about drawing windows to the screen in Java:</i> Start with the <tt>cip.render.RenderWindow</tt> program
that basically handles the display of a window
with your generated image on the screen with title, resizing, image save, etc.&nbsp; Implement an
<tt>cip.render.IRenderWindow</tt> that writes your image
pixels to the window.&nbsp; Check out <tt>cip.render.TestRenderWindow</tt> for details of writing pixels
to the window.
</li>
<li><i>Focus on rendering geometry:</i> Use the <font color="lime"><i>// eye position and viewing</i></font> info to
determine pixel positions and project rays from the eye through the pixels.
</li>
<li><i>The geometry is Convex</i> - Spheres have a closed form intersection solution. For convex polyhedra, if the furthest
goes-in is closer than the closest goes-out the ray intersects the object
</li>
<li><i>Use a trivial lighting model</i> -To determine the displayed colour, use the
object colour and multiply it by (<tt>-y</tt> component of the surface normal of the
intersected point) if the y component is negative, otherwise multiply by <tt>0.0</tt>.&nbsp;
This will give the rough appearance that the scene is lit by a single light near
the eye.
</li>
</ul>

<h4>Environment</h4>
<p>You will use a very simple environment, as described in the code below.&nbsp;
Please vary something (object size, position, color, etc.) so that your solution
(i.e. the picture that is generated) is unique.&nbsp; The classes used in
library in <tt>cip.render.core</tt>.&nbsp; Note that this environment is in a right-handed axis system with
the XY plane being horizontal and +Z being up.&nbsp; Here is the environment
description in Java:

<pre>
    <font color="lime"><i>// eye position and viewing</i></font>
    <font color="DodgerBlue"><b>private final</b></font> Point3f <font color="Violet">m_ptEye</font> = <font color="DodgerBlue"><b>new</b></font> Point3f(0.0f,-6.0f,0.0f);
    <font color="DodgerBlue"><b>private final</b></font> Vector3f <font color="Violet">m_vtUp</font> = <font color="DodgerBlue"><b>new</b></font> Vector3f(0.0f,0.0f,1.0f);
    <font color="DodgerBlue"><b>private final</b></font> Vector3f <font color="Violet">m_vtSide</font> = <font
    color="DodgerBlue"><b>new</b></font> Vector3f(1.0f,0.0f,0.0f);
    <font color="DodgerBlue"><b>private final</b></font> Point3f <font color="Violet">m_ptTarget</font> = <font
    color="DodgerBlue"><b>new</b></font> Point3f(0.0f,0.0f,0.0f);  <font color="lime"><i>// center of the image plane</i></font>
    <font color="DodgerBlue"><b>private final float</b></font> <font color="Violet">m_fTargetWidth</font> = 4.0f;  <font
    color="lime"><i>// width of the image plane</i></font>

    <font color="lime"><i>// background colour</i></font>
    <font color="DodgerBlue"><b>private final</b></font> RGBf <font color="Violet">m_rgbBkg</font> = <font
    color="DodgerBlue"><b>new</b></font> RGBf(0.25f,0.25f,0.25f);

    <font color="lime"><i>// base plane</i></font>
    <font color="DodgerBlue"><b>private final</b></font> RGBf <font color="Violet">m_rgbBase</font> = <font color="DodgerBlue"><b>new</b></font> RGBf(0.0f,1.0f,0.0f);
    <font color="DodgerBlue"><b>private final</b></font> Plane3f[] <font color="Violet">m_plnBase</font> = {
        <font color="DodgerBlue"><b>new</b></font> Plane3f( 0.0f,  0.0f,  1.0f,   1.0f), <font color="lime"><i>// top</i></font>
        <font color="DodgerBlue"><b>new</b></font> Plane3f( 0.0f, -1.0f,  0.0f,  -2.0f), <font color="lime"><i>// front</i></font>
        <font color="DodgerBlue"><b>new</b></font> Plane3f( 1.0f,  0.0f,  0.0f,  -2.0f), <font color="lime"><i>// right</i></font>
        <font color="DodgerBlue"><b>new</b></font> Plane3f( 0.0f,  1.0f,  0.0f,  -2.0f), <font color="lime"><i>// back</i></font>
        <font color="DodgerBlue"><b>new</b></font> Plane3f(-1.0f,  0.0f,  0.0f,  -2.0f), <font color="lime"><i>// left</i></font>
        <font color="DodgerBlue"><b>new</b></font> Plane3f( 0.0f,  0.0f, -1.0f,  -1.5f), <font color="lime"><i>// bottom</i></font>
    };

    <font color="lime"><i>// little gem object</i></font>
    <font color="DodgerBlue"><b>private final float</b></font> <font color="Violet">m_fRoot3</font> = 1.0f / (<font
    color="DodgerBlue"><b>float</b></font>)Math.sqrt(3.0);
    <font color="DodgerBlue"><b>private final</b></font> RGBf <font color="Violet">m_rgbGem</font> = <font
    color="DodgerBlue"><b>new</b></font> RGBf(1.0f,0.0f,0.0f);
    <font color="DodgerBlue"><b>private final</b></font> Plane3f[] <font color="Violet">m_plnGem</font> = {
        <font color="DodgerBlue"><b>new</b></font> Plane3f(  m_fRoot3,  m_fRoot3,  m_fRoot3,  (0.0f)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f(  m_fRoot3, -m_fRoot3,  m_fRoot3, -(2.0f * m_fRoot3)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f( -m_fRoot3,  m_fRoot3,  m_fRoot3,  (2.0f * m_fRoot3)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f( -m_fRoot3, -m_fRoot3,  m_fRoot3,  (0.0f)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f(  m_fRoot3,  m_fRoot3, -m_fRoot3, -(m_fRoot3)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f(  m_fRoot3, -m_fRoot3, -m_fRoot3, -(3.0f * m_fRoot3)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f( -m_fRoot3,  m_fRoot3, -m_fRoot3,  (m_fRoot3)),
        <font color="DodgerBlue"><b>new</b></font> Plane3f( -m_fRoot3, -m_fRoot3, -m_fRoot3, -(m_fRoot3))
    };

    <font color="lime"><i>// center sphere</i></font>
    <font color="DodgerBlue"><b>private final</b></font> RGBf <font color="Violet">m_rgbSphere1</font> = new RGBf(0.0f,0.0f,1.0f);
    <font color="DodgerBlue"><b>private final</b></font> Point3f <font color="Violet">m_ptCtrSphere1</font> = new Point3f(0.0f,0.0f,0.0f);
    <font color="DodgerBlue"><b>private final float</b></font> <font color="Violet">m_fRadSphere1</font> = 1.0f;

    <font color="lime"><i>// other sphere</i></font>
    <font color="DodgerBlue"><b>private final</b></font> RGBf <font color="Violet">m_rgbSphere2</font> = new RGBf(1.0f,0.0f,1.0f);
    <font color="DodgerBlue"><b>private final</b></font> Point3f <font color="Violet">m_ptCtrSphere2</font> = new Point3f(-0.6f,-1.25f,0.6f);
    <font color="DodgerBlue"><b>private final float</b></font> <font color="Violet">m_fRadSphere2</font> = 0.25f;
</pre>

<p>And here is an example of what the resulting image should look like:</p>
<p align="center"><img border="0" src="assign1.jpg" width="566" height="572"><br>
</p>
<p>The assignment should be submitted as the generated image (<tt>.gif</tt>, <tt>.jpeg</tt>, or
<tt>.bmp</tt>) and a <tt>.zip</tt> file containing the code.&nbsp; Email these to me before the
next class.
<p>You may observe some artifacts around the edges of the spheres.&nbsp; These
are the result of a common problem in 3D graphics where numerical round-off
errors give results that are not what you logically expect.&nbsp; Bring these up
in class next time and we will discuss them.</p>
<p><b>Hints</b></p>
</p>
<!--mstheme--></font><!--msthemelist-->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<!--msthemelist-->
<tr>
<td valign="baseline" width="42"><img src="_themes/roys-chalkboard/chabul1c.gif" width="15" height="15" hspace="13"></td>
<td valign="top" width="100%"><!--mstheme--><font face="Arial, Arial, Helvetica">Make sure you know how to display colours on the
screen.&nbsp; Do something
like painting a pixels with: <tt>red = screenX % 255</tt>, and <tt>blue = screenY %255</tt> if you
display as 8 bit RGB.&nbsp; Scale this a little differently if RGB are being
expressed as floats.&nbsp; You should see a horizontal red gradation overlaid
with a vertical blue gradation.&nbsp; This lets you know you have the loop
through the pixels working correctly and know how to get colour to the screen, see
<tt>cip.render.TestRenderWindow</tt> for details<!--mstheme--></font><!--msthemelist--></td>
</tr>
<!--msthemelist--></table><!--mstheme--><font face="Arial, Arial, Helvetica">
<!--mstheme--></font><!--msthemelist-->
<p></p>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<!--msthemelist-->
<tr>
<td valign="baseline" width="42"><img src="_themes/roys-chalkboard/chabul1c.gif" width="15" height="15" hspace="13"></td>
<td valign="top" width="100%"><!--mstheme--><font face="Arial, Arial, Helvetica">Start with just the center sphere and work out the
computation of the ray for
every pixel and the intersection of the ray with a sphere.&nbsp; Just display
the sphere color or background colour until you get the sphere to work.&nbsp;
Then add the second sphere and get the visibility logic (displaying the closest
intersection) working.&nbsp; Finally, add the base.<!--mstheme--></font><!--msthemelist--></td>
</tr>
<!--msthemelist--></table><!--mstheme--><font face="Arial, Arial, Helvetica">
<!--mstheme--></font><!--msthemelist-->
<p></p>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<!--msthemelist-->
<tr>
<td valign="baseline" width="42"><img src="_themes/roys-chalkboard/chabul1c.gif" width="15" height="15" hspace="13"></td>
<td valign="top" width="100%"><!--mstheme--><font face="Arial, Arial, Helvetica">If/when you trap exceptions, display some strange
and easily identifiable
colour for the pixel (I use yellow - <tt>RGB = 1.0,1.0,0.0</tt>) so that you get visual
feedback that you have a problem somewhere.<!--mstheme--></font><!--msthemelist--></td>
</tr>
<!--msthemelist--></table><!--mstheme--><font face="Arial, Arial, Helvetica">
<!--mstheme--></font><!--msnavigation--></td>
</tr><!--msnavigation--></table>
</body>
</html>