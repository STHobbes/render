/* Hyperboloid.java * Created November 2nd 2002 * Copyright Jim Snow * * This program is free software; you can redistribute it and/or modify it under the * terms of the GNU General Public License as published by the Free Software * Foundation; either version 2 of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, but WITHOUT ANY * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A * PARTICULAR PURPOSE. See the GNU General Public License for more details. * * The GNU General Public License is available at: *      http://www.opensource.org/licenses/gpl-license.php */package cip.render.raytrace.geometry;import cip.render.DynXmlObjParseException;import cip.render.FrameLoader;import cip.render.IDynXmlObject;import cip.render.INamedObject;import cip.render.raytrace.interfaces.IRtMaterial;import org.jetbrains.annotations.NotNull;import org.w3c.dom.Element;import org.w3c.dom.Node;import java.util.LinkedList;import java.util.StringTokenizer;/** * This is the implementation of a hyperboloid centered at 0,0,0 of infinite extend in the major axis Z. * <p> * The hyperboloid is specified as a node in an XML file as: * <pre> *     <font style="color:blue">&lt;<b>DynamicallyLoadedObject</b> class="cip.raytrace.geometry.Hyperboloid" name="<font style="color:magenta"><i>hyperbolsoidName</i></font>"&gt;</font> *         <font style="color:blue">&lt;<b>radius</b>&gt;<font style="color:magenta"><i>radius</i></font>&lt;/<b>radius</b>&gt;</font> *         <font style="color:blue">&lt;<b>radius</b>&gt;<font style="color:magenta"><i>Xradius,Yradius,Zradius</i></font>&lt;/<b>radius</b>&gt;</font> *         <font style="color:blue">&lt;<b>MaterialByRef</b> name="<font style="color:magenta"><i>materialName</i></font>"/&gt;</font> *         <font style="color:blue">&lt;<b>DynamicallyLoadedObject</b> class="<font style="color:magenta"><i>materialClass</i></font>"&gt;</font> *               <font style="color:gray"><b>.</b> *             <i>material specific nodes and attributes</i> *               <b>.</b></font> *         <font style="color:blue">&lt;/<b>DynamicallyLoadedObject</b>&gt;</font> *     <font style="color:blue">&lt;/<b>DynamicallyLoadedObject</b>&gt;</font> * </pre> * * @author jim snow * @version 1.5 * @since 1.0 */public class Hyperboloid extends AQuadricGeo {    public Hyperboloid() {        super();        m_quadric.setHyperboloid(1.0f, 2.0f, 3.0f);        m_strType = m_quadric.getQuadricType();        m_strName = "hyperboloid";    }    public float getRadiusX() {        return (float) Math.sqrt(1.0f / m_quadric.getQ(1));    }    public float getRadiusY() {        return (float) Math.sqrt(1.0f / m_quadric.getQ(2));    }    public float getRadiusZ() {        return (float) Math.sqrt(-1.0f / m_quadric.getQ(3));    }    public void setRadius(final float fRx, final float fRy, final float fRz) {        m_quadric.setHyperboloid(fRx, fRy, fRz);    }    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // IDynXmlObject interface implementation                                                                                     //    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void loadFromXml(final @NotNull Element xmlElement, final LinkedList<INamedObject> refObjectList)            throws DynXmlObjParseException {        try {            Node domNode = xmlElement.getFirstChild();            while (null != domNode) {                if (domNode instanceof Element) {                    final Element element = (Element) domNode;                    IRtMaterial mtl;                    if (element.getTagName().equalsIgnoreCase(XML_TAG_RADIUS)) {                        Node txtNode = element.getFirstChild();                        while (null != txtNode) {                            if (txtNode.getNodeType() == Node.TEXT_NODE) {                                final StringTokenizer tokens = new StringTokenizer(txtNode.getNodeValue(), ",");                                if (tokens.countTokens() == 1) {                                    final float fRx = Float.parseFloat(txtNode.getNodeValue().trim());                                    m_quadric.setHyperboloid(fRx, fRx, fRx);                                } else if (tokens.countTokens() == 3) {                                    final float fRx = Float.parseFloat(tokens.nextToken().trim());                                    final float fRy = Float.parseFloat(tokens.nextToken().trim());                                    final float fRz = Float.parseFloat(tokens.nextToken().trim());                                    m_quadric.setHyperboloid(fRx, fRy, fRz);                                    m_strType = m_quadric.getQuadricType();                                } else {                                    throw new IllegalArgumentException(String.format(                                            "\"%s\" specification must be in the form \"radius\" or \"Xradius,Yradius,Zradius\"",                                            XML_TAG_RADIUS));                                }                                break;                            }                            txtNode = txtNode.getNextSibling();                        }                    } else if (null != (mtl = FrameLoader.tryParseMaterial(element, refObjectList, getType(), m_strName))) {                        m_mtl = mtl;                    } else {                        pkgThrowUnrecognizedXml(element);                    }                }                domNode = domNode.getNextSibling();            }        } catch (final Throwable t) {            if (t instanceof DynXmlObjParseException) {                throw (DynXmlObjParseException) t;            } else {                throw new DynXmlObjParseException(getClass().getName() + " parse exception", t);            }        }    }    protected void internalToXml(@NotNull final Element element) {        // The radius        final Element elRadius = element.getOwnerDocument().createElement(XML_TAG_RADIUS);        element.appendChild(elRadius);        if ((getRadiusX() == getRadiusY()) && (getRadiusX() == getRadiusZ())) {            elRadius.appendChild(element.getOwnerDocument().createTextNode(String.format("%f", getRadiusX())));        } else {            elRadius.appendChild(element.getOwnerDocument().createTextNode(String.format("%f,%f,%f",                    getRadiusX(), getRadiusY(), getRadiusZ())));        }        // The material        if ((m_mtl != DEFAULT_MATERIAL) && (m_mtl instanceof IDynXmlObject)) {            ((IDynXmlObject) m_mtl).toChildXmlElement(element);        }    }    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // IRtGeometry interface implementation                                                                                  //    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}