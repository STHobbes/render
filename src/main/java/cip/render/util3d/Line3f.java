/*
 * Line3f.java
 *
 * Created on September 11, 2002, 6:39 PM
 * Copyright(c) 1993-2019 Crisis in Perspective, Inc.
 *                        PO Box 1949
 *                        Hood River, OR 97031
 *                        www.crisisinperspecive.com
 */
package cip.render.util3d;

/**
 * A class representing a line in 3D of single precision (the elements are represented by <tt>float</tt> values),
 * hence the name <tt>Line3f</tt>.
 * <p>
 * This class implements the basic functionality for a 3D line required for rendering and 3D graphics use.  Internally, the
 * representation is an explicit parametric line specified as a start point and a direction vector.  This  class is
 * patterned after and most code adapted from the <tt>CLine3f</tt> class of the <b><i>JOEY</i></b> toolkit written and
 * distributed by Crisis in Perspective, Inc.
 *
 * @author royster.hall@gmail.com
 * @version 1.0
 * @since 1.0
 */
public final class Line3f {
    public Line3f m_next = null;

    //-------------------------------------------------------------------------------------------------------------------------
    /**
     * The starting point of the line.
     */
    public final Point3f m_ptOrg = new Point3f();

    /**
     * The direction of the line.  NOTE: in typical use, the direction vector is
     * normalized so that points a given distance from the starting point can be simply
     * generated by adding the direction vector scaled by the distance to the sarting
     * point.  However, normalization of the direction vector is not enforced by the
     * <tt>Line3f</tt> class, and must be controlled by the user of the class.
     */
    public final Vector3f m_vDir = new Vector3f();

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Creates a new instance of <tt>Line3f</tt>.
     */
    public Line3f() {
    }

    /**
     * Creates a new instance of <tt>Line3f</tt>.
     *
     * @param ptOrg The origin of the line.
     * @param vDir  The direction of the line.  NOTE: the direction is used as given and is not normalized
     *              during initialization.
     */
    public Line3f(final Point3f ptOrg, final Vector3f vDir) {
        setValue(ptOrg, vDir);
    }

    /**
     * Creates a new instance of <tt>Line3f</tt>.
     *
     * @param ptOrg  The origin of the line.
     * @param ptThru A point the line passes through.  The direction of the line is from the origin to this
     *               point, and is normalized during initialization.
     * @throws ZeroLengthVectorException This exception is thrown if the <tt>ptOrg</tt> and <tt>ptThru</tt>
     *                                   points are essentially identical (so close together that a meaningful direction cannot be determined).
     */
    public Line3f(final Point3f ptOrg, final Point3f ptThru) throws ZeroLengthVectorException {
        setValue(ptOrg, ptThru);
    }

    /**
     * Creates a new instance of <tt>Line3f</tt>.
     *
     * @param lnInit The line this line will be set equal to.
     */
    public Line3f(final Line3f lnInit) {
        setValue(lnInit);
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Sets the value of the line to be a line starting at <tt>ptOrg</tt> andin the direction <tt>vDir</tt>.
     *
     * @param ptOrg The origin of the line.
     * @param vDir  The direction of the line.  NOTE: the direction is used as given and is not normalized
     *              during initialization.
     * @return Returns this line initialized with the value set as specified.
     */
    public Line3f setValue(final Point3f ptOrg, final Vector3f vDir) {
        m_ptOrg.setValue(ptOrg);
        m_vDir.setValue(vDir);
        return this;
    }

    /**
     * Sets the value of the line to be a normalized line starting at <tt>ptOrg</tt> and passing through <tt>ptThru</tt>.
     *
     * @param ptOrg  The origin of the line.
     * @param ptThru A point the line passes through.  The direction of the line is from the origin to this
     *               point, and is normalized during initialization.
     * @return Returns this line initialized with the value set as specified.
     * @throws ZeroLengthVectorException This exception is thrown if the <tt>ptOrg</tt> and <tt>ptThru</tt>
     *                                   points are essentially identical (so close together that a meaningful direction cannot be determined).
     */
    public Line3f setValue(final Point3f ptOrg, final Point3f ptThru) throws ZeroLengthVectorException {
        m_ptOrg.setValue(ptOrg);
        m_vDir.setValue(ptOrg, ptThru).normalize();
        return this;
    }

    /**
     * Sets the value of the line to be equal to another line.
     *
     * @param lnInit The line this line will be set equal to.
     * @return Returns this line initialized with the value set as specified.
     */
    public Line3f setValue(final Line3f lnInit) {
        m_ptOrg.setValue(lnInit.m_ptOrg);
        m_vDir.setValue(lnInit.m_vDir);
        return this;
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Normalizes the line - specifically, this means that the direction vector of the line is normalized.
     *
     * @return Returns the line after normalization.
     * @throws ZeroLengthVectorException Thrown if the lenght of the direction vector is so close to zero that the
     *                                   normalization operation is meaningless - i.e. the direction of the line to totally ambiguous.
     */
    public Line3f normalize() throws ZeroLengthVectorException {
        m_vDir.normalize();
        return this;
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Get the point at some parametric distance along the line.  If the line is normalized (i.e. the direction vector is
     * normalized) the parametric distance is equal to the geometric distance from the origin of the line.
     *
     * @param pt    The point at the parametric distance.  This point is passed in so that the caller can decide whether this
     *              point is instantiated, borrowed, or part of the description of some other object.
     * @param fDist The parametric distance along the line.
     * @return Returns <tt>pt</tt>.
     */
    public Point3f pointAtDistace(final Point3f pt, final float fDist) {
        pt.x = m_ptOrg.x + (fDist * m_vDir.i);
        pt.y = m_ptOrg.y + (fDist * m_vDir.j);
        pt.z = m_ptOrg.z + (fDist * m_vDir.k);
        return pt;
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Tests another line, <tt>ln</tt>, for equality with this line.
     *
     * @param ln The line to be tested.  This line is unchanged.
     * @return Returns <tt>true</tt> if <tt>ln</tt> is equal to this line (identical
     * in all components), and <tt>false</tt> otherwise.
     */
    public boolean equals(final Line3f ln) {
        if (this == ln) {
            return true;
        }
        if ((null == ln) ||
                (!m_ptOrg.equals(ln.m_ptOrg)) ||
                (!m_vDir.equals(ln.m_vDir))) {
            return false;
        }
        return true;
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Tests another object, <tt>obj</tt>, for equality with this line.
     *
     * @param obj The object to be tested.  This object is unchanged.
     * @return Returns <tt>true</tt> if <tt>obj</tt> is equal to this line (also a <tt>Line3f</tt> and
     * identical in all components), and <tt>false</tt> otherwise.
     */
    public boolean equals(final Object obj) {
        if ((null == obj) ||
                (getClass() != obj.getClass())) {
            return false;
        }
        return equals((Line3f) obj);
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Clone this line.
     *
     * @return Returns a clone of this line.  The clone is NOT obtained from the object cache.
     */
    public Object clone() {
        return cloneLine3f();
    }

    //-------------------------------------------------------------------------------------------------------------------------

    /**
     * Clone this line.
     *
     * @return Returns a clone of this line.  The clone is NOT obtained from the object cache.
     */
    public Line3f cloneLine3f() {
        return new Line3f(m_ptOrg, m_vDir);
    }

}
